RTLAB SOURCE MINI-DOCUMENTATION

Below a brief description of the source files and what they do.


Sample Data Input/Output Classes and File Format Classes:
-------------------------------

		dsdstream.h
		dsdstream_inner.cpp
		dsdstream_inner.h
		dsdstream.cpp

These files declare and define the DSDStream class, which is responsible for
reading/writing the native data format of DAQSystem -- the .nds format. The
details of this file format aren't yet well documented, but you can always read
the source! :)

The DSDStream class is one big class that is broken up into two sets of files.
One is the definitions and declarations of its outermost methods. It also
contains several inner classes for encapsulating different concepts used in the
file format itself, hence the need for the _inner set of files.



		sample_writer.cpp
		sample_writer.h

Generic interface for any type of sample writer.  A SampleWriter is a Conumer
that accepts 'SampleStructs' and serializes them somehow to disk.  These files
contian the abstract SampleWriter class, as well as the children SampleBinWriter
and SampleGzWriter.  The former is basically the SampleWriter interface as
wrappers that work with the DSDStream class, while the latter in an
implementation of a .gz compressed ascii file format for DAQ System.


		sample_source.cpp
		sample_source.h

A SampleSource can be anything that generates/produces samples or reads them
from disk.  This is an interface and some implementations of certain types of
sources (namely FIFOs, RealTime FIFOs, and Files).


		sample_reader.cpp
		sample_reader.h

A SampleReader manipulates a SampleSource to read samples from it.  A
reader uses the SampleSource interface to provide higher-level functionality to
client classes.



		sample_spooler.cpp
		sample_spooler.h

An instance of the TempSpooler<> template for SampleStructs.  This
class was designed to provide functionality for things that need to
temporarily work large numbers of samples.


Generic Infrastructure-related
------------------------------

		tempfile.cpp
		tempfile.h
		tempspooler.h

Provide temporary storage for various uses.  TempSpooler<> is a template that
uses the tempfile mechanism to serialize a large dump of data to disk.  This
makes manipulating huge amounts of data possible for performing various
transformations or other operations on the data.


		config.h
		common.cpp
		common.h

Some common #defines, typedefs and helper functions used by all the other files.
config.h will someday be auto-generated by a ./configure script.  For now it
just contains some string constants.


		producer_consumer.h

A set of template classes that allow many-to-many associations between generic
object instances. This mostly accomplishes the same thing as Qt's
signal-slot mechanism, but is faster. Example: You can create a
Producer<SampleStruct *> instance that produces samples.  Then you can 'emit'
these samples out to interested Consumer<SampleStruct *> instances.  An
interested consumer is one that registered itself with a Producer.  Each
Producer can produce for more than 1 Consumer, and each Consumer can
consume from more than 1 producer.


		sample_consumer.h

A convenience template that is essentially a Consumer<SampleStruct *>


		settings.cpp
		settings.h

A generic class that can read Windows-style '.ini' files.  This is the native
configuration file format for DAQ System.


		daq_settings.cpp
		daq_settings.h

Inherits from Settings.  Some DAQ System-specific settings-processing and
defaults.  Basically leverages the Settings class to parse the DAQ System .ini
file and return higher-level information from that file.


		exception.cpp
		exception.h

Declarations and definitions of the various Exception classes.  These classes
are fairly hierarchical.  All exceptions inherit from the 'Exception' class and
all have the ability to store error messages and even display them either
graphically or on the console.


		profile.cpp
		profile.h

Some classes used for timing and/or profiling.  This is if you are too
lazy to use the profiling tools available on the internet, or if you want to be
able to have your algorithms dynamically profiles themselves as they run.


		daq_images.cpp
		daq_images.h

A central repository of all image data for buttons, the help system, and
whatever other parts of DAQ System that use images.  Basically DAQImages is the
class that contains static members for all the XPM arrays that become images at
runtime.  See the Qt documentation about XPMs (this rather clever method for
storing image data in binary files).


		daq_mime_sources.cpp
		daq_mime_sources.h

DAQMimeSources is the central registry of all the html 'documents' and images
used in DAQ System.  Mainly this is for use with the help system. (For more
information read the Qt QMimeSourceFactory documentation).


		version.h

Contains just the preprocessor macros for the version string and code for DAQ
System.



Visualization
-------------

		layer_renderer.cpp
		layer_renderer.h

(Unused but working).  A generic way to store multiple 'layers' of graphics and
then render them as 1 widget to the screen.  This is useful for advanced
graphing applications where you need to work with discrete graphical
'sprite-like' objects that can stack, overlap, but still need to be manipulated
separately.  Example: if you want to plot several functions or several channels
on one grid, you would use 1 layer per graph and then render them together to
the screen.



Hardware or Comedi-related related Classes
------------------------

		comedi_device.cpp
		comedi_device.h

C++ classes that encapsulate things like comedi devices, subdevices and their
capabilities.  See probe.cpp/probe.h.


		probe.cpp
		probe.h

Probes comedi to determine which DAQ boards are installed and if rt_process.o is
running.  Builds ComediDevices for each board found.



		comedi_coprocess.cpp
		comedi_coprocess.h

Not-yet-fully-working code that should allow DAQ System to run _without_
RTLinux and/or the rt_process.o kernel module loaded.  This is so that it can be
possible to acquire data (but not do control) in non-realtime.  Hard real time
for data acquisition is really overkill, and some users don't need it.
However, realtime control requires hard real time if it is to be of any use to
anybody.

When finished and fully integrated into DAQ System, this class will
provide a sorely needed feature, and may help to make the RTLab project more
popular and the DAQ System application easier to install.


Help System
-----------

		daq_help_browser.cpp
		daq_help_browser.h
		html_browser.cpp
		html_browser.h

Some classes that manage the help system UI-wise. HTML Browser is a generic
mini-html browser widget.


Realtime Linux-related
----------------------

		rt_process.c
		rt_process.h

LKM that is responsible for the realtime acquistition and control thread in
DAQSystem.  This module opens the comedi device and begins acquiring data as
soon as channels get turned on by userspace.  Userspace communicates with this
Kernel Module via shared memory and RealTime FIFOs.


		shared_stuff.h

Contains structure and other definitions user by both rt_process and userland.


		shm.cpp
		shm.h

Contains the ShmController class, which is responsible for a variety of
operations on the shared semory segment used to communicate with rt_process.


		tweaked_mbuff.h

A modified version of RTLinux's mbuff.h which gets rid of some annoying compiler
warning messages about comparing unsigned and signed values.


Custom code not of general interest
-----------------------------------

		avn_stim.h
		avn_stim.c

The LKM that plugs into rt_process.o and does the control part of the loop for
the AVN Stim experiment.  The AVN Stim experiment is some custom code written
for a particular experiment we did on patients here at Cornell.


		avn_stim.cpp
		avn_stim_private.h

A plugin written for DAQSystem that interfaces with the above-mentioned
avn_stim.o LKM. This plugin extends the Plugin class and has some visualization
code that leverages the ecggraph.c class.


Graphing
--------

		daq_graphcontrols.cpp
		daq_graphcontrols.h

Helper widget that contains the control toolbar that is seen in DAQSystem at the
top of each channel window.


		ecggraph.cpp
		ecggraph.h

Widget that plots the DAQSystem graphs to the screen.


		ecggraphcontainer.cpp
		ecggraphcontainer.h

Widget that contains the entire surrounding area of an ECGGraph in the
channel windows.  This includes the little x-axis and y-axis labels and the
channel controls as mentioned above in the description of daq_graphcontrols.cpp



Plugin System
-------------

		plugin.h

Abstract class that defines the plugin interface.  All plugins are accessed
and manipulated by DAQSystem via the interface defined in this file.

Plugins are really just dynamically loaded libraries (.so files) that contain at
least one class that inherits from class Plugin.  Plugins are a useful way to
extend the interface and functionality of the DAQ System application.  This,
along with the ability to modify the behavior of the acquisition and control
loop in rt_process.o in the kernel, make DAQ System potentially extensible
enough to  work with a variety of DAQ/Control applications.  See the avn_stim
series of files for an example of a plugin that contains both a kernel module
component as well as a userspace component.


General UI
----------

		configuration.cpp
		configuration.h

The initial configuration dialog box.


		daq_system.cpp
		daq_system.h

Class that holds the whole DAQ System application together.  It is basically
a QWidget containing all of the DAQ System interface (with the exception of the
configuration window).


		output_file_w.cpp
		output_file_w.h

Helper widget that is used in a number of places to specify output files.


		simple_text_editor.cpp
		simple_text_editor.h

The Log window inherits from this.  This is essentially a QMultiLineEditor with
some added functionality.



